00000000 		  ; outline of bubble sort program
00000000 00100000 ldc 0x1000
00000001 0000000b a2sp
00000002 ffffff0a adj -1
00000003 00000b00 ldc 11
00000004 00000003 stl 0
00000005 00004c00 ldc array
00000006 0000010d call sort
00000007 00000012 HALT
00000008 		  ;
00000008 		  ; Areg= return address
00000008 		  ; Breg= address of elements
00000008 		  ; SP+0= number of elements sort
00000008 		  ; int* sort(int* in,int count)
00000008 		  ;{
00000008 		  ;   int x;
00000008 		  ;   int y;
00000008 		  ;   int temp;
00000008 		  ;   for(x=0;x < count-1;x++)
00000008 		  ;   {
00000008 		  ;       for(y=1;y<count-x;y++)
00000008 		  ;       {
00000008 		  ;           if(((in+y))>((in+y-1)))
00000008 		  ;           {
00000008 		  ;               temp=(*(in+y-1));
00000008 		  ;               ((in+y-1))=((in+y));
00000008 		  ;               (*(in+y))=temp;
00000008 		  ;           }
00000008 		  ;       }
00000008 		  ;   }
00000008 		  ;   exit:return;
00000008 		  ;}
00000008 ffffff0a sort: adj -1
00000009 00000003 stl 0
0000000a 		  ;save return address
0000000a 00000003 stl 2
0000000b 		  ;save address of elements
0000000b fffffd0a adj -3
0000000c 00000000 ldc 0
0000000d 00000003 stl 0
0000000e 		  ;save temp
0000000e 00000000 ldc 1
0000000f 00000003 stl 1
00000010 		  ;save y
00000010 00000000 ldc 0
00000011 00000003 stl 2
00000012 		  ;save x
00000012 00000002 loop_out: ldl 4
00000013 		  ;load count
00000013 00000002 ldl 2
00000014 		  ;load x
00000014 00000007 sub
00000015 		  ;count - x
00000015 00000000 ldc 1
00000016 00000007 sub
00000017 		  ;count-1-x
00000017 0000310f brz done
00000018 00000000 ldc 1
00000019 00000003 stl 1
0000001a 		  ;y = 1
0000001a 00000002 loop_in: ldl 4
0000001b 		  ;load count
0000001b 00000002 ldl 2
0000001c 		  ;load x
0000001c 00000007 sub
0000001d 		  ;count - x
0000001d 00000002 ldl 1
0000001e 		  ;load y
0000001e 00000007 sub
0000001f 		  ;count - x -y
0000001f 0000210f brz addx
00000020 00000002 ldl 5
00000021 		  ;load address of elements
00000021 00000002 ldl 1
00000022 00000000 ldc 1
00000023 00000007 sub
00000024 00000002 ldl 5
00000025 00000006 add
00000026 00000003 stl 6
00000027 00000002 ldl 1
00000028 00000002 ldl 5
00000029 00000006 add
0000002a 00000003 stl 7
0000002b 00000002 ldl 7
0000002c 00000004 ldnl 0
0000002d 00000002 ldl 6
0000002e 00000004 ldnl 0
0000002f 00000007 sub
00000030 		  ;array[y-1]-array[y]
00000030 00000110 brlz swap
00000031 00000a11 br addy
00000032 		  swap:
00000032 00000002 ldl 6
00000033 		  ;load address of elements
00000033 00000004 ldnl 0
00000034 		  ;array[y-1]
00000034 00000003 stl 0
00000035 		  ;temp = array[y-1]
00000035 00000002 ldl 7
00000036 00000004 ldnl 0
00000037 		  ;array[y]
00000037 00000002 ldl 6
00000038 00000005 stnl 0
00000039 		  ;array[y-1] = array[y]
00000039 00000002 ldl 0
0000003a 		  ;load temp
0000003a 00000002 ldl 7
0000003b 00000005 stnl 0
0000003c 		  ;array[y] = temp
0000003c 		  ;increment
0000003c 00000000 addy: ldc 1
0000003d 00000002 ldl 1
0000003e 		  ;load y
0000003e 00000006 add
0000003f 		  ;y++
0000003f 00000003 stl 1
00000040 		  ;save y++
00000040 ffffd911 br loop_in
00000041 00000000 addx: ldc 1
00000042 00000002 ldl 2
00000043 		  ;load x
00000043 00000006 add
00000044 		  ;x++
00000044 00000003 stl 2
00000045 00000000 ldc 1
00000046 00000002 ldl 5
00000047 00000006 add
00000048 		  ;array++
00000048 ffffc911 br loop_out
00000049 00000002 done: ldl 3
0000004a 		  ;load return address
0000004a 0000000a adj 5
0000004b 		  ;sp = array
0000004b 0000000e return
0000004c 		  ;ok,
0000004c 00000000 array: data 9
0000004d 00000000 data 8
0000004e 00000000 data 7
0000004f 00000000 data 6
00000050 00000000 data 5
00000051 00000000 data 4
00000052 00000000 data 3
00000053 00000000 data 2
00000054 00000000 data 1
00000055 00000000 data 0
00000056 00000000 data 0
